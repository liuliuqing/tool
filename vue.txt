https://www.jq22.com/jquery-info819



模板语法v-text  v-html  v-bind:title v-if v-else-if v-else  v-show
计算属性Computed： 内置缓存，值没有变化不会执行调用;setter  getert
方法执行methods：
监听变化watch: 也具备了缓存机制与computed一致，但语法更复杂
样式绑定:class="{actived: isActived}"   :class="[actived]"动态设置actived的样式名
        :style="styleobj"  :style="[styleobj]"  :style="[styleobj, {fontSize: '12px'}]"
列表 v-for="item of list" 列表更建议用of
     v-of="(item, index) of list"  :key="index"
	 改变数组的方法a:使用push\splice\slice等  b:重新定义数组，改变引用  c:Vue.set(list, index, 'ss')
	 改变对象的方法a:重新定义数组  b:Vue.set(obj, 'ss')  c:vm.$set(obj, 'ss')
		 

1、【定义子组件】如果不起作用，需要定义is='组件名'
<table>
   <tr is="row"></tr>
</table>
Vue.component('row', {
  template: '<tr></tr>'
})

2、【子组件定义data必须是个函数】
Vue.component('row', {
  props: [],
  data: function(){
     return{
	  content : 'xxx'
	 }  
  } 
  template: '<tr>{{content}}</tr>'
})

3、【ref定义组件操作dom】
<div ref='box'></div>
this.$refs.box

4、【父子组件传值】
父----子：通过属性传值给子组件， <child :count="0" @handChile="xx"> </child>  子组件通过props: ['count']接收,
          因为vue单向数据流原理，子组件只可以接受父组件的值，不可以修改父组件的值
		  count接收的值只可以展示不能修改，需要克隆复制一份conut进行修改
          
子----父：通过事件传值给父组件，this.$emit('handChile'，params)

4、【props增加校验规则】
Vue.component('row', {
  props: [
   content: String,
   dataL : [Number, String],
   
  ],
  props: {
	content: {
		type: String,
		required: true, // 必传
		default: 'xxxx', // 默认值
		validator: function(value){
			return value.length > 5  // 自定义校验
		}
	}
  }
  template: '<tr>{{content}}</tr>'
})

5、【给组件绑定原生事件】
<child @click.native="handleChild"><child>

6、【非父子组件传值   vuex\ Bus 总线 发布订阅模式 观察者模式】
<div>
  <child content='1'></child>
  <child content='2'></child>
</div>
Vue.prototype.bus = new Vue();
 Vue.component('child', {
 data: function() {
  return {
    selfContent: this.content,
  }
 },
  props: [
   content: String,
  ],
  template: '<div @click="handleclick">{{selfContent}}</div>',
  methods: {
    handleclick: function(){
	 this.bus.$emit('change', this.selfContent)
	}
  },
  mounted: function(){
	var _this = this;
	this.bus.$on('change', function(mes){
	  _this.selfContent = mes;
	})
  }
})

7、【slot 插槽】
<div>
  <child content='1'>
	<p slot="header">xxxx</p>
  </child>
</div>
Vue.component('child', {
  template: '<div><slot name="header">默认内容</slot></div>',   // 默认值会被覆盖
})

插槽作用域(用于循环，或者是dom结构不确定时使用)
<child>
	<template slot-scope="props">   插槽接收必须要使用template
	 <li>{{props.item}}</li>
	</template>
</child>

Vue.component('child', {
  template: '<div>
   <slot v-for="item of list" :item=item></slot>
  </div>',   // 默认值会被覆盖
})

8、【v-once 插槽  <component :is="type">】
<child-one><child-one>
<child-two><child-two>
点击按钮两个组件交替显示

<component :is="type"></component> type = child-one/child-two
根据type的值，动态的加载对应的组件

<child-one v-once><child-one>
v-once静态页面展示性能更佳，放置内存里，切换时不会重新生成而是从内存中读取


9、【vue的动画原理：自动给元素添加class】
:duration // 自定义进入和移出的持续时间：
appear  // 设置节点在初始渲染的过渡
type="transtion"  // 动画以transtion时长为准
 
<transition :duration="{ enter: 500, leave: 800 }" name="fade"> 
    <p v-if="show">hello</p> // v-show
</transition>
通过js实现动画效果
appear
v-on:before-appear="customBeforeAppearHook"
v-on:appear="customAppearHook"
v-on:after-appear="customAfterAppearHook"
v-on:appear-cancelled="customAppearCancelledHook"
v-on:before-enter="beforeEnter"
v-on:enter="enter"
v-on:after-enter="afterEnter"
v-on:enter-cancelled="enterCancelled"
v-on:before-leave="beforeLeave"
v-on:leave="leave"
v-on:after-leave="afterLeave"
v-on:leave-cancelled="leaveCancelled" 

通过css实现动画效果
x-enter
x-enter-active,  
x-leave-to
x-leave- active
enter-active-class =""
leave-active-class=""
appear-active-class=""

x就是transition的name；如果不设置name 默认是v-enter-active
也可以自定义这个classname,  enter-active-class="animated tada"  leave-active-class="animated bounceOutRight"

.fade-enter-active, .fade-leave-active {
  transition: opacity .5s;
}
.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
  opacity: 0;
}

过渡模式mode
<transition name="fade" mode="out-in">
  <!-- ... the buttons ... -->
</transition>
in-out：新元素先进行过渡，完成之后当前元素过渡离开。
out-in：当前元素先进行过渡，完成之后新元素过渡进入。

列表过渡transition-group










